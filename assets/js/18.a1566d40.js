(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{612:function(e,t,n){"use strict";n.r(t);var a=n(5),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"_1-css禁用鼠标事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-css禁用鼠标事件"}},[e._v("#")]),e._v(" 1.css禁用鼠标事件")]),e._v(" "),n("p",[e._v(".disabled {\npointer-events: none;\ncursor: default;\nopacity: 0.6;\n}")]),e._v(" "),n("h2",{attrs:{id:"_2-get-post的理解和他们之间的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-get-post的理解和他们之间的区别"}},[e._v("#")]),e._v(" 2.get/post的理解和他们之间的区别")]),e._v(" "),n("p",[e._v("http")]),e._v(" "),n("p",[e._v("超文本传输协议（HTTP）的设计目的是保证客户机与服务器之间的通信。\nHTTP 的工作方式是客户机与服务器之间的请求-应答协议。\nweb 浏览器可能是客户端，而计算机上的网络应用程序也可能作为服务器端。")]),e._v(" "),n("p",[e._v("http方法：")]),e._v(" "),n("p",[e._v("HEAD: 与 GET 相同，但只返回 HTTP 报头，不返回文档主体\nPUT: 上传指定的 URI 表示\nDELETE: 删除指定资源\nOPTIONS: 返回服务器支持的 HTTP 方法\nCONNECT: 把请求连接转换到透明的 TCP/IP 通道\nPOST: 向指定的资源提交要被处理的数据")]),e._v(" "),n("p",[e._v("// 查询字符串（名称/值对）是在 POST 请求的 HTTP 消息主体中发送的\nPOST /test/demo_form.asp HTTP/1.1\nHost: w3schools.com\nname1=value1&name2=value2")]),e._v(" "),n("p",[e._v("GET: 从指定的资源请求数据")]),e._v(" "),n("p",[e._v("GET和POST的区别")]),e._v(" "),n("p",[e._v("GET 请求可被缓存\nGET 请求保留在浏览器历史记录中\nGET 请求可被收藏为书签\nGET 请求不应在处理敏感数据时使用\nGET 请求有长度限制(2048字符),IE和Safari浏览器限制2k;Opera限制4k;Firefox，Chrome限制8k\nGET 请求只应当用于取回数据")]),e._v(" "),n("p",[e._v("POST 请求不会被缓存\nPOST 请求不会保留在浏览器历史记录中\nPOST 不能被收藏为书签\nPOST 请求对数据长度没有要求")]),e._v(" "),n("h2",{attrs:{id:"_3-实现条纹网格的方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现条纹网格的方式"}},[e._v("#")]),e._v(" 3.实现条纹网格的方式")]),e._v(" "),n("p",[e._v("nth-child(even/odd)")]),e._v(" "),n("p",[e._v("// odd表示基数，此时选中基数行的样式，even表示偶数行\n.row:nth-child(odd){\nbackground: #eee;\n}")]),e._v(" "),n("p",[e._v("nth-of-type(odd)")]),e._v(" "),n("p",[e._v(".row:nth-of-type(odd){\nbackground: #eee;\n}")]),e._v(" "),n("p",[e._v("渐变实现linear-gradient")]),e._v(" "),n("p",[e._v(".stripe-bg{\npadding: .5em;\nline-height: 1.5em;\nbackground: beige;\nbackground-size: auto 3em;\nbackground-origin: content-box;\nbackground-image: linear-gradient(rgba(0,0,0,.2) 50%, transparent 0);\n}")]),e._v(" "),n("h2",{attrs:{id:"_4-js求平面两点之间的距离"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-js求平面两点之间的距离"}},[e._v("#")]),e._v(" 4.js求平面两点之间的距离")]),e._v(" "),n("p",[e._v("// 数据可以以数组方式存储，也可以是对象方式\nlet a = {x:'6', y:10},\nb = {x: 8, y: 20};\nfunction distant(a,b){\nlet dx = Number(a.x) - Number(b.x)\nlet dy = Number(a.y) - Number(b.y)\nreturn Math.pow(dx"),n("em",[e._v("dx + dy")]),e._v("dy, .5)\n}")]),e._v(" "),n("h2",{attrs:{id:"_5-css禁止用户选择"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-css禁止用户选择"}},[e._v("#")]),e._v(" 5.css禁止用户选择")]),e._v(" "),n("p",[e._v("body{\n-webkit-touch-callout: none;\n-webkit-user-select: none;\n-khtml-user-select: none;\n-moz-user-select: none;\n-ms-user-select: none;\nuser-select: none;\n}")]),e._v(" "),n("h2",{attrs:{id:"_6-数组去重"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-数组去重"}},[e._v("#")]),e._v(" 6.数组去重")]),e._v(" "),n("p",[e._v("// indexOf实现\nvar array = [1, 1, '1'];")]),e._v(" "),n("p",[e._v("function unique(array) {\nvar res = [];\nfor (var i = 0, len = array.length; i < len; i++) {\nvar current = array[i];\nif (res.indexOf(current) === -1) {\nres.push(current)\n}\n}\nreturn res;\n}")]),e._v(" "),n("p",[e._v("console.log(unique(array));")]),e._v(" "),n("p",[e._v("// 排序后去重\nvar array = [1, 1, '1'];")]),e._v(" "),n("p",[e._v("function unique(array) {\nvar res = [];\nvar sortedArray = array.concat().sort();\nvar seen;\nfor (var i = 0, len = sortedArray.length; i < len; i++) {\n// 如果是第一个元素或者相邻的元素不相同\nif (!i || seen !== sortedArray[i]) {\nres.push(sortedArray[i])\n}\nseen = sortedArray[i];\n}\nreturn res;\n}")]),e._v(" "),n("p",[e._v("console.log(unique(array));")]),e._v(" "),n("p",[e._v("// filter实现\nvar array = [1, 2, 1, 1, '1'];\nfunction unique(array) {\nvar res = array.filter(function(item, index, array){\nreturn array.indexOf(item) === index;\n})\nreturn res;\n}\nconsole.log(unique(array));")]),e._v(" "),n("p",[e._v("// 排序去重\nvar array = [1, 2, 1, 1, '1'];\nfunction unique(array) {\nreturn array.concat().sort().filter(function(item, index, array){\nreturn !index || item !== array[index - 1]\n})\n}\nconsole.log(unique(array));")]),e._v(" "),n("p",[e._v("// Object键值对\nvar array = [{value: 1}, {value: 1}, {value: 2}];")]),e._v(" "),n("p",[e._v("function unique(array) {\nvar obj = {};\nreturn array.filter(function(item, index, array){\nconsole.log(typeof item + JSON.stringify(item))\nreturn obj.hasOwnProperty(typeof item + JSON.stringify(item)) ? false : (obj[typeof item + JSON.stringify(item)] = true)\n})\n}")]),e._v(" "),n("p",[e._v("console.log(unique(array)); // [{value: 1}, {value: 2}]")]),e._v(" "),n("p",[e._v("// ES6 Set实现\nvar unique = (a) => [...new Set(a)]")]),e._v(" "),n("h2",{attrs:{id:"_7-什么是cdn和cdn的好处"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-什么是cdn和cdn的好处"}},[e._v("#")]),e._v(" 7.什么是CDN和CDN的好处")]),e._v(" "),n("p",[e._v("CDN:CDN是将源站内容分发至最接近用户的节点，使用户可就近取得所需内容，提高用户访问的响应速度和成功率。解决因分布、带宽、服务器性能带来的访问延迟问题，适用于站点加速、点播、直播等场景。\n好处：\n1、多域名加载资源\n一般情况下，浏览器都会对单个域名下的并发请求数（文件加载）进行限制，通常最多有4个，那么第5个加载项将会被阻塞，直到前面的某一个文件加载完毕。\n因为CDN文件是存放在不同区域（不同IP）的，所以对浏览器来说是可以同时加载页面所需的所有文件（远不止4个），从而提高页面加载速度。")]),e._v(" "),n("p",[e._v("2、文件可能已经被加载过并保存有缓存\n一些通用的js库或者是css样式库，如jQuery，在网络中的使用是非常普遍的。当一个用户在浏览你的某一个网页的时候，很有可能他已经通过你网站使用的CDN访问过了其他的某一个网站，恰巧这个网站同样也使用了jQuery，那么此时用户浏览器已经缓存有该jQuery文件（同IP的同名文件如果有缓存，浏览器会直接使用缓存文件，不会再进行加载），所以就不会再加载一次了，从而间接的提高了网站的访问速度\n3、高效率\n你的网站做的再NB也不会NB过百度NB过Google吧？一个好的CDNs会提供更高的效率，更低的网络延时和更小的丢包率。\n4、分布式的数据中心\n假如你的站点布置在北京，当一个香港或者更远的用户访问你的站点的时候，他的数据请求势必会很慢很慢。而CDNs则会让用户从离他最近的节点去加载所需的文件，所以加载速度提升就是理所当然的了。\n5、使用情况分析\n一般情况下CDNs提供商（如百度云加速）都会提供数据统计功能，可以了解更多关于用户访问自己网站的情况，可以根据统计数据对自己的站点适时适当的做出些许调整。\n6、有效防止网站被攻击\n一般情况下CDNs提供商也是会提供网站安全服务的")]),e._v(" "),n("h2",{attrs:{id:"_8-圣杯布局和双飞翼布局"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-圣杯布局和双飞翼布局"}},[e._v("#")]),e._v(" 8.圣杯布局和双飞翼布局")]),e._v(" "),n("p",[e._v("参考连接")]),e._v(" "),n("h2",{attrs:{id:"_9-正则表达式匹配手机号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-正则表达式匹配手机号"}},[e._v("#")]),e._v(" 9.正则表达式匹配手机号")]),e._v(" "),n("p",[e._v('function checkPhone(){\nif(!(/^1[345678]\\d{9}$/.test(phone))){\nalert("手机号码有误，请重填");\nreturn false;\n}\n}')]),e._v(" "),n("h2",{attrs:{id:"_10-如何提高首频加载速度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-如何提高首频加载速度"}},[e._v("#")]),e._v(" 10.如何提高首频加载速度")]),e._v(" "),n("p",[e._v("1.js外联文件放到body底部，css外联文件放到head内\n2.http静态资源尽量用多个子域名\n3.服务器端提供html和http静态资源时最好开启gzip\n4.在js,css,img等资源响应的http headers里设置expires,last-modified\n5.尽量减少http requests的数量\n6.js/css/html/img资源压缩\n7.使用css spirtes，可以减少img请求次数\n8.大图使用lazyload懒加载\n9.避免404，减少外联js\n10.减少cookie大小可以提高获得响应的时间\n11.减少dom elements的数量\n12.使用异步脚本，动态创建脚本")]),e._v(" "),n("h2",{attrs:{id:"_11-浏览器内核-渲染引擎"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-浏览器内核-渲染引擎"}},[e._v("#")]),e._v(" 11.浏览器内核(渲染引擎)")]),e._v(" "),n("p",[e._v("IE/360/搜狗浏览器: Trident\nChrome/Safari/Opera: WebKit(KHTML的一个开源的分支)\n(虽然我们称WebKit为浏览器内核，但不太适合直接称渲染引擎，因为WebKit本身主要是由两个引擎构成的，一个正是渲染引擎“WebCore”，另一个则是javascript解释引擎“JSCore”，它们均是从KDE的渲染引擎KHTML及javascript解释引擎KJS衍生而来。)\n(在13年发布的Chrome 28.0.1469.0版本开始，Chrome放弃Chromium引擎转而使用最新的Blink引擎（基于WebKit2——苹果公司于2010年推出的新的WebKit引擎），Blink对比上一代的引擎精简了代码、改善了DOM框架，也提升了安全性。)\n(为了减少研发成本，Opera在2013年2月宣布放弃Presto，转而跟随Chrome使用WebKit分支的Chromium引擎作为自家浏览器核心引擎)\nFirefox/SeaMonkey: Gecko")]),e._v(" "),n("h2",{attrs:{id:"_12-浏览器渲染过程及优化建议"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-浏览器渲染过程及优化建议"}},[e._v("#")]),e._v(" 12.浏览器渲染过程及优化建议")]),e._v(" "),n("p",[e._v("1）解析：\n一个是HTML/SVG/XHTML，事实上，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。 CSS，解析CSS会产生CSS规则树。 Javascript，脚本，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree.\n2）渲染：浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。注意：\nRendering Tree 渲染树并不等同于DOM树，因为一些像Header或display:none的东西就没必要放在渲染树中了。 CSS 的 Rule Tree主要是为了完成匹配并把CSS Rule附加上Rendering Tree上的每个Element。也就是DOM结点。也就是所谓的Frame。 然后，计算每个Frame（也就是每个Element）的位置，这又叫layout和reflow过程。\n3）绘制：最后通过调用操作系统Native GUI的API绘制。")]),e._v(" "),n("p",[e._v("减少reflow和repaint\n1）不要一条一条地修改DOM的样式。还不如预先定义好css的class，然后修改DOM的className。")]),e._v(" "),n("p",[e._v("把DOM离线后修改。如：\n使用documentFragment 对象在内存里操作DOM 先把DOM给display:none(有一次reflow)，然后你想怎么改就怎么改。比如修改100次，然后再把他显示出来。 clone一个DOM结点到内存里，然后想怎么改就怎么改，改完后，和在线的那个的交换一下。\n3）不要把DOM结点的属性值放在一个循环里当成循环里的变量。不然这会导致大量地读写这个结点的属性\n4）为动画的HTML元件使用fixed或absoulte的position，尽量使用transfoem，那么修改他们的CSS是不会reflow的\n5）尽量少使用table布局。因为可能很小的一个小改动会造成整个table的重新布局")]),e._v(" "),n("h2",{attrs:{id:"_13-页面导入样式时-使用link和-import有什么区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-页面导入样式时-使用link和-import有什么区别"}},[e._v("#")]),e._v(" 13. 页面导入样式时，使用link和@import有什么区别？")]),e._v(" "),n("p",[e._v("（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;\n（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;\n（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;\n(4)link支持使用js控制DOM去改变样式，而@import不支持;")]),e._v(" "),n("h2",{attrs:{id:"_14-简述一下你对html语义化的理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-简述一下你对html语义化的理解"}},[e._v("#")]),e._v(" 14. 简述一下你对HTML语义化的理解？")]),e._v(" "),n("p",[e._v("用正确的标签做正确的事情。\nhtml语义化让页面的内容结构化，便于对浏览器、搜索引擎解析;\n即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;\n搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;\n使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。")]),e._v(" "),n("h2",{attrs:{id:"_15-请描述一下-cookies-sessionstorage-和-localstorage-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-请描述一下-cookies-sessionstorage-和-localstorage-的区别"}},[e._v("#")]),e._v(" 15. 请描述一下 cookies，sessionStorage 和 localStorage 的区别？")]),e._v(" "),n("p",[e._v("cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。\ncookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。\nsessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。\n存储大小：\ncookie数据大小不能超过4k。\nsessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。\n有期时间：\nlocalStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；\nsessionStorage  数据在当前浏览器窗口关闭后自动删除。\ncookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭")]),e._v(" "),n("h2",{attrs:{id:"_16-iframe有那些缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-iframe有那些缺点"}},[e._v("#")]),e._v(" 16. iframe有那些缺点？")]),e._v(" "),n("p",[e._v("*iframe会阻塞主页面的Onload事件；\n*搜索引擎的检索程序无法解读这种页面，不利于SEO;\n*iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。\n使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript\n动态给iframe添加src属性值，这样可以绕开以上两个问题。")]),e._v(" "),n("h2",{attrs:{id:"_17-vue父子组件生命周期的顺序及作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-vue父子组件生命周期的顺序及作用"}},[e._v("#")]),e._v(" 17. vue父子组件生命周期的顺序及作用？")]),e._v(" "),n("p",[e._v("（图片来自vue官网，更多vue学习推荐去官网查看详细文档）")]),e._v(" "),n("h2",{attrs:{id:"_18-网页验证码是干嘛的-是为了解决什么安全问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-网页验证码是干嘛的-是为了解决什么安全问题"}},[e._v("#")]),e._v(" 18. 网页验证码是干嘛的，是为了解决什么安全问题？")]),e._v(" "),n("p",[e._v("区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；\n有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。")]),e._v(" "),n("h2",{attrs:{id:"_19-介绍一下标准的css的盒子模型-低版本ie的盒子模型有什么不同的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_19-介绍一下标准的css的盒子模型-低版本ie的盒子模型有什么不同的"}},[e._v("#")]),e._v(" 19. 介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？")]),e._v(" "),n("p",[e._v("（1）有两种， IE 盒子模型、W3C 盒子模型；\n（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；\n（3）区  别： IE的content部分把 border 和 padding计算了进去;")]),e._v(" "),n("h2",{attrs:{id:"_20-position的值relative和absolute定位原点是"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_20-position的值relative和absolute定位原点是"}},[e._v("#")]),e._v(" 20. position的值relative和absolute定位原点是？")]),e._v(" "),n("p",[e._v("absolute\n生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。\nfixed （老IE不支持）\n生成绝对定位的元素，相对于浏览器窗口进行定位。\nrelative\n生成相对定位的元素，相对于其正常位置进行定位。\nstatic\n默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。\ninherit\n规定从父元素继承 position 属性的值。")]),e._v(" "),n("h2",{attrs:{id:"_21-经常遇到的浏览器的兼容性有哪些-原因-解决方法是什么-常用hack的技巧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_21-经常遇到的浏览器的兼容性有哪些-原因-解决方法是什么-常用hack的技巧"}},[e._v("#")]),e._v(" 21. 经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？")]),e._v(" "),n("p",[e._v("png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.")]),e._v(" "),n("p",[e._v("浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。")]),e._v(" "),n("p",[e._v("IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。\n浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}\n这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)\n渐进识别的方式，从总体中逐渐排除局部。\n首先，巧妙的使用“\\9”这一标记，将IE游览器从所有情况中分离出来。\n接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。\ncss\n.bb{\nbackground-color:red;/所有识别/\nbackground-color:#00deff\\9; /IE6、7、8识别/\n+background-color:#a200ff;/IE6、7识别/\n_background-color:#1e0bd1;/IE6识别/\n}")]),e._v(" "),n("p",[e._v("IE下,可以使用获取常规属性的方法来获取自定义属性,\n也可以使用getAttribute()获取自定义属性;\nFirefox下,只能使用getAttribute()获取自定义属性。\n解决方法:统一通过getAttribute()获取自定义属性。")]),e._v(" "),n("p",[e._v("IE下,even对象有x,y属性,但是没有pageX,pageY属性;\nFirefox下,event对象有pageX,pageY属性,但是没有x,y属性。")]),e._v(" "),n("p",[e._v("解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。")]),e._v(" "),n("p",[e._v("Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,\n可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。")]),e._v(" "),n("p",[e._v("超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:\nL-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}")]),e._v(" "),n("h2",{attrs:{id:"_22-css优化、提高性能的方法有哪些"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_22-css优化、提高性能的方法有哪些"}},[e._v("#")]),e._v(" 22. CSS优化、提高性能的方法有哪些？")]),e._v(" "),n("p",[e._v("关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）；\n如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）；\n提取项目的通用公有样式，增强可复用性，按模块编写组件；增强项目的协同开发性、可维护性和可扩展性;\n使用预处理工具或构建工具（gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级）；")]),e._v(" "),n("h2",{attrs:{id:"_23-如何修改chrome记住密码后自动填充表单的黄色背景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_23-如何修改chrome记住密码后自动填充表单的黄色背景"}},[e._v("#")]),e._v(" 23. 如何修改chrome记住密码后自动填充表单的黄色背景 ？")]),e._v(" "),n("p",[e._v("input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill {\nbackground-color: rgb(250, 255, 189); /* #FAFFBD; */\nbackground-image: none;\ncolor: rgb(0, 0, 0);\n}")]),e._v(" "),n("h2",{attrs:{id:"_24-让页面里的字体变清晰-变细用css怎么做"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_24-让页面里的字体变清晰-变细用css怎么做"}},[e._v("#")]),e._v(" 24. 让页面里的字体变清晰，变细用CSS怎么做？")]),e._v(" "),n("p",[e._v("-webkit-font-smoothing: antialiased;")]),e._v(" "),n("h2",{attrs:{id:"_25-让overflow-scroll平滑滚动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_25-让overflow-scroll平滑滚动"}},[e._v("#")]),e._v(" 25. 让overflow:scroll平滑滚动？")]),e._v(" "),n("p",[e._v("-webkit-overflow-scrolling: touch;")]),e._v(" "),n("h2",{attrs:{id:"_26-如何将浮点数点左边的数每三位添加一个逗号-如12000000-11转化为『12-000-000-11』"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_26-如何将浮点数点左边的数每三位添加一个逗号-如12000000-11转化为『12-000-000-11』"}},[e._v("#")]),e._v(" 26. 如何将浮点数点左边的数每三位添加一个逗号，如12000000.11转化为『12,000,000.11』?")]),e._v(" "),n("p",[e._v("function commafy(num){\nreturn num && num\n.toString()\n.replace(/(\\d)(?=(\\d{3})+.)/g, function($1, $2){\nreturn $2 + ',';\n});\n}")]),e._v(" "),n("h2",{attrs:{id:"_27-javascript作用链域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_27-javascript作用链域"}},[e._v("#")]),e._v(" 27. Javascript作用链域?")]),e._v(" "),n("p",[e._v("全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。\n当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，\n直至全局函数，这种组织形式就是作用域链。")]),e._v(" "),n("ol",{attrs:{start:"28"}},[n("li",[e._v("谈谈This对象的理解。")])]),e._v(" "),n("p",[e._v("this总是指向函数的直接调用者（而非间接调用者）；\n如果有new关键字，this指向new出来的那个对象；\n在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；")]),e._v(" "),n("h2",{attrs:{id:"_29-eval是做什么的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_29-eval是做什么的"}},[e._v("#")]),e._v(" 29. eval是做什么的？")]),e._v(" "),n("p",[e._v("它的功能是把对应的字符串解析成JS代码并运行；\n应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。\n由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval('('+ str +')');")]),e._v(" "),n("h2",{attrs:{id:"_30-什么是window对象-什么是document对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_30-什么是window对象-什么是document对象"}},[e._v("#")]),e._v(" 30. 什么是window对象? 什么是document对象?")]),e._v(" "),n("p",[e._v("window对象是指浏览器打开的窗口。\ndocument对象是Documentd对象（HTML 文档对象）的一个只读引用，window对象的一个属性。")]),e._v(" "),n("h2",{attrs:{id:"_31-1-2-3-map-parseint-答案是多少"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_31-1-2-3-map-parseint-答案是多少"}},[e._v("#")]),e._v(' 31. ["1", "2", "3"].map(parseInt) 答案是多少？')]),e._v(" "),n("p",[e._v('["1", "2", "3"].map(parseInt) 答案也就是：[1, NaN, NaN]')]),e._v(" "),n("h2",{attrs:{id:"_32-什么是闭包-closure-为什么要用它"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_32-什么是闭包-closure-为什么要用它"}},[e._v("#")]),e._v(" 32. 什么是闭包（closure），为什么要用它？")]),e._v(" "),n("p",[e._v("闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。")]),e._v(" "),n("h2",{attrs:{id:"_33-javascript-代码中的-use-strict-是什么意思-使用它区别是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_33-javascript-代码中的-use-strict-是什么意思-使用它区别是什么"}},[e._v("#")]),e._v(' 33. javascript 代码中的"use strict";是什么意思 ? 使用它区别是什么？')]),e._v(" "),n("p",[e._v("使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。\n默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;\n全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；\n保证代码运行的安全,限制函数中的arguments修改;\n提高编译器效率，增加运行速度；")]),e._v(" "),n("h2",{attrs:{id:"_34-如何判断一个对象是否属于某个类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_34-如何判断一个对象是否属于某个类"}},[e._v("#")]),e._v(" 34. 如何判断一个对象是否属于某个类？")]),e._v(" "),n("p",[e._v("if(a instanceof Person){\nalert('yes');\n}\n// 判断对象类型最好的方式\n// 对于 Object 对象，直接调用 toString()  就能返回 [object Object] 。而对于其他对象，则需要通过 call / apply 来调用才能返回正确的类型信息。\nObject.prototype.toString.call('') ;   // [object String]\nObject.prototype.toString.call(1) ;    // [object Number]\nObject.prototype.toString.call(true) ; // [object Boolean]\nObject.prototype.toString.call(Symbol()); //[object Symbol]\nObject.prototype.toString.call(undefined) ; // [object Undefined]\nObject.prototype.toString.call(null) ; // [object Null]\nObject.prototype.toString.call(new Function()) ; // [object Function]\nObject.prototype.toString.call(new Date()) ; // [object Date]\nObject.prototype.toString.call([]) ; // [object Array]\nObject.prototype.toString.call(new RegExp()) ; // [object RegExp]\nObject.prototype.toString.call(new Error()) ; // [object Error]\nObject.prototype.toString.call(document) ; // [object HTMLDocument]\nObject.prototype.toString.call(window) ; //[object global] window 是全局对象 global 的引用")]),e._v(" "),n("h2",{attrs:{id:"_35-new一个对象的过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_35-new一个对象的过程"}},[e._v("#")]),e._v(" 35. new一个对象的过程")]),e._v(" "),n("p",[e._v("1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n2、属性和方法被加入到 this 引用的对象中。\n3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。")]),e._v(" "),n("h2",{attrs:{id:"_36-ajax-解决浏览器缓存问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_36-ajax-解决浏览器缓存问题"}},[e._v("#")]),e._v(" 36. Ajax 解决浏览器缓存问题")]),e._v(" "),n("p",[e._v('1、在ajax发送请求前加上 anyAjaxObj.setRequestHeader("If-Modified-Since","0")。')]),e._v(" "),n("p",[e._v('2、在ajax发送请求前加上 anyAjaxObj.setRequestHeader("Cache-Control","no-cache")。\n3、在URL后面加上一个随机数： "fresh=" + Math.random();。\n4、在URL后面加上时间戳："nowtime=" + new Date().getTime();。\n5、如果是使用jQuery，直接这样就可以了 $.ajaxSetup({cache:false})。这样页面的所有ajax都会执行这条语句就是不需要保存缓存记录。')]),e._v(" "),n("h2",{attrs:{id:"_37-如何解决跨域问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_37-如何解决跨域问题"}},[e._v("#")]),e._v(" 37. 如何解决跨域问题?")]),e._v(" "),n("p",[e._v("jsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面")]),e._v(" "),n("h2",{attrs:{id:"_38-模块化开发怎么做"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_38-模块化开发怎么做"}},[e._v("#")]),e._v(" 38. 模块化开发怎么做")]),e._v(" "),n("p",[e._v("立即执行函数,不暴露私有成员")]),e._v(" "),n("p",[e._v("var module1 = (function(){\n    var _count = 0;\n    var m1 = function(){\n      //...\n    };\n    var m2 = function(){\n      //...\n    };\n    return {\n      m1 : m1,\n      m2 : m2\n    };\n  })();")]),e._v(" "),n("h2",{attrs:{id:"_39-amd-modules-asynchronous-definition-、cmd-common-module-definition-规范区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_39-amd-modules-asynchronous-definition-、cmd-common-module-definition-规范区别"}},[e._v("#")]),e._v(" 39. AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？")]),e._v(" "),n("p",[e._v("对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。\n2. CMD 推崇依赖就近，AMD 推崇依赖前置。")]),e._v(" "),n("p",[e._v("// CMD\ndefine(function(require, exports, module) {\nvar a = require('./a')\na.doSomething()\n// 此处略去 100 行\nvar b = require('./b') // 依赖可以就近书写\nb.doSomething()\n// ...\n})")]),e._v(" "),n("p",[e._v("// AMD 默认推荐\ndefine(['./a', './b'], function(a, b) { // 依赖必须一开始就写好\na.doSomething()\n// 此处略去 100 行\nb.doSomething()\n// ...\n})")]),e._v(" "),n("h2",{attrs:{id:"_40-requirejs的核心原理是什么-如何动态加载的-如何避免多次加载的-如何-缓存的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_40-requirejs的核心原理是什么-如何动态加载的-如何避免多次加载的-如何-缓存的"}},[e._v("#")]),e._v(" 40. requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）")]),e._v(" "),n("p",[e._v("参考链接")]),e._v(" "),n("h2",{attrs:{id:"_41-如何实现一个模块加载器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_41-如何实现一个模块加载器"}},[e._v("#")]),e._v(" 41. 如何实现一个模块加载器")]),e._v(" "),n("p",[e._v("参考连接")]),e._v(" "),n("h2",{attrs:{id:"_42-列举几条-javascript-的基本代码规范"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_42-列举几条-javascript-的基本代码规范"}},[e._v("#")]),e._v(" 42. 列举几条 JavaScript 的基本代码规范")]),e._v(" "),n("p",[e._v("（1）不要在同一行声明多个变量\n（2）如果你不知道数组的长度，使用 push\n（3）请使用 ===/!== 来比较 true/false 或者数值\n（4）对字符串使用单引号 ''(因为大多时候我们的字符串。特别html会出现\")\n（5）使用对象字面量替代 new Array 这种形式\n（6）绝对不要在一个非函数块里声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但是它们解析不同\n（7）不要使用全局函数\n（8）总是使用 var 来声明变量，如果不这么做将导致产生全局变量，我们要避免污染全局命名空间\n（9）Switch 语句必须带有 default 分支\n（10）使用 /**...*/ 进行多行注释，包括描述，指定类型以及参数值和返回值\n（11）函数不应该有时候有返回值，有时候没有返回值\n（12）语句结束一定要加分号\n（13）for 循环必须使用大括号\n（14）if 语句必须使用大括号\n（15）for-in 循环中的变量应该使用 var 关键字明确限定作用域，从而避免作用域污染\n（16）避免单个字符名，让你的变量名有描述意义\n（17）当命名对象、函数和实例时使用驼峰命名规则\n（18）给对象原型分配方法，而不是用一个新的对象覆盖原型，覆盖原型会使继承出现问题")]),e._v(" "),n("h2",{attrs:{id:"_43-dom操作-怎样添加、移除、移动、复制、创建和查找节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_43-dom操作-怎样添加、移除、移动、复制、创建和查找节点"}},[e._v("#")]),e._v(" 43. DOM操作——怎样添加、移除、移动、复制、创建和查找节点?")]),e._v(" "),n("p",[e._v("1）创建新节点\ncreateDocumentFragment()    //创建一个DOM片段\ncreateElement()   //创建一个具体的元素\ncreateTextNode()   //创建一个文本节点\n（2）添加、移除、替换、插入\nappendChild()\nremoveChild()\nreplaceChild()\ninsertBefore() //在已有的子节点前插入一个新的子节点\n（3）查找\ngetElementsByTagName()    //通过标签名称\ngetElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)\ngetElementById()    //通过元素Id，唯一性")]),e._v(" "),n("h2",{attrs:{id:"_44-jquery实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_44-jquery实现原理"}},[e._v("#")]),e._v(" 44. jquery实现原理")]),e._v(" "),n("p",[e._v("参考链接")]),e._v(" "),n("h2",{attrs:{id:"_45-jquery中如何将数组转化为json字符串-然后再转化回来"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_45-jquery中如何将数组转化为json字符串-然后再转化回来"}},[e._v("#")]),e._v(" 45. jquery中如何将数组转化为json字符串，然后再转化回来？")]),e._v(" "),n("p",[e._v("jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：\n$.fn.stringifyArray = function(array) {\nreturn JSON.stringify(array)\n}")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("$.fn.parseArray = function(array) {\n    return JSON.parse(array)\n}\n\n然后调用：\n$.fn.stringifyArray(array)\n")])])]),n("h2",{attrs:{id:"_46-jquery的-extend深复制和浅复制原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_46-jquery的-extend深复制和浅复制原理"}},[e._v("#")]),e._v(" 46. jquery的$.extend深复制和浅复制原理")]),e._v(" "),n("p",[e._v("// 浅复制\n$ = {")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v(" extend : function(target, options) { \n\n    for (name in options) { \n\n        target[name] = options[name]; \n\n    } \n\n    return target; \n\n} \n")])])]),n("p",[e._v("};\n// 深复制\n$ = {\nextend : function(deep, target, options) {\nfor (name in options) {\ncopy = options[name];\nif (deep && copy instanceof Array) {\ntarget[name] = $.extend(deep, [], copy);\n} else if (deep && copy instanceof Object) {")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("          target[name] = $.extend(deep, {}, copy); \n       } else { \n          target[name] = options[name]; \n      } \n  } \n\n return target; \n")])])]),n("p",[e._v("}\n};")]),e._v(" "),n("h2",{attrs:{id:"_47-jquery-extend-与-jquery-fn-extend的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_47-jquery-extend-与-jquery-fn-extend的区别"}},[e._v("#")]),e._v(" 47. jquery.extend 与 jquery.fn.extend的区别？")]),e._v(" "),n("p",[e._v("jquery.extend 为jquery类添加类方法，可以理解为添加静态方法")]),e._v(" "),n("p",[e._v("jquery.fn.extend:\n源码中jquery.fn = jquery.prototype，所以对jquery.fn的扩展，就是为jquery类添加成员函数\n使用：\njquery.extend扩展，需要通过jquery类来调用，而jquery.fn.extend扩展，所有jquery实例都可以直接调用。")]),e._v(" "),n("h2",{attrs:{id:"_48-如何判断当前脚本运行在浏览器还是node环境中-阿里"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_48-如何判断当前脚本运行在浏览器还是node环境中-阿里"}},[e._v("#")]),e._v(" 48. 如何判断当前脚本运行在浏览器还是node环境中？（阿里）")]),e._v(" "),n("p",[e._v("this === window ? 'browser' : 'node';")]),e._v(" "),n("h2",{attrs:{id:"_49-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应。给出你的技术实现方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_49-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应。给出你的技术实现方案"}},[e._v("#")]),e._v(" 49. 实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？")]),e._v(" "),n("p",[e._v("参考链接")]),e._v(" "),n("h2",{attrs:{id:"_50-把-script-标签-放在页面的最底部的body封闭之前-和封闭之后有什么区别-浏览器会如何解析它们"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_50-把-script-标签-放在页面的最底部的body封闭之前-和封闭之后有什么区别-浏览器会如何解析它们"}},[e._v("#")]),e._v(" 50. 把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？")]),e._v(" "),n("p",[e._v("之前推荐的方法（已过时）：之前解决这个问题的方法是把script标签放到body标签之后 ，这确保了解析到"),e._v("之前都不会被script终端。这个方法是有问题的: 浏览器在整个文档解析完成之前都不能下载script文件，如果文档很大的话，解析完HTML，用户依然要等待script文件下载并执行完成之后，才能操作这个网站。")]),e._v(" "),n("p",[e._v("现在推荐的解决方案：\n现在浏览器script标签支持 async 和 defer 属性. 应用这些属性当script被下载时，浏览器更安全而且可以并行下载（下载script并不阻断HTML解析）。\n1.async标记的Script异步执行下载，并执行。这意味着script下载时并不阻塞HTML的解析，并且下载结束script马上执行。\n2.defer标签的script顺序执行。这种方式也不会阻断浏览器解析HTML。\n跟 async不同, defer scripts在整个文档里的script都被下载完才顺序执行。")]),e._v(" "),n("h2",{attrs:{id:"_51-jquery一个对象可以同时绑定多个事件-这是如何实现的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_51-jquery一个对象可以同时绑定多个事件-这是如何实现的"}},[e._v("#")]),e._v(" 51. JQuery一个对象可以同时绑定多个事件，这是如何实现的？")]),e._v(" "),n("p",[e._v('//多个事件同一个函数：\n$("div").on("click mouseover", function(){});\n//多个事件不同函数\n$("div").on({\nclick: function(){},\nmouseover: function(){}\n});')]),e._v(" "),n("h2",{attrs:{id:"_52-什么是前端路由-前端路由的-实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_52-什么是前端路由-前端路由的-实现原理"}},[e._v("#")]),e._v(" 52. 什么是前端路由？前端路由的 实现原理")]),e._v(" "),n("p",[e._v("参考链接")]),e._v(" "),n("h2",{attrs:{id:"_53-检测浏览器版本版本有哪些方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_53-检测浏览器版本版本有哪些方式"}},[e._v("#")]),e._v(" 53. 检测浏览器版本版本有哪些方式？")]),e._v(" "),n("p",[e._v("功能检测、userAgent特征检测")]),e._v(" "),n("p",[e._v('比如：navigator.userAgent\n//"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36\n(KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36"')]),e._v(" "),n("h2",{attrs:{id:"_54-什么是polyfill"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_54-什么是polyfill"}},[e._v("#")]),e._v(" 54. 什么是Polyfill?")]),e._v(" "),n("p",[e._v("polyfill 是“在旧版浏览器上复制标准 API 的 JavaScript 补充”,可以动态地加载 JavaScript 代码或库，在不支持这些标准 API 的浏览器中模拟它们。\n例如，geolocation（地理位置）polyfill 可以在 navigator 对象上添加全局的 geolocation 对象，还能添加 getCurrentPosition 函数以及“坐标”回调对象，\n所有这些都是 W3C 地理位置 API 定义的对象和函数。因为 polyfill 模拟标准 API，所以能够以一种面向所有浏览器未来的方式针对这些 API 进行开发，\n一旦对这些 API 的支持变成绝对大多数，则可以方便地去掉 polyfill，无需做任何额外工作。")]),e._v(" "),n("h2",{attrs:{id:"_55-做的项目中-有没有用过或自己实现一些-polyfill-方案-兼容性处理方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_55-做的项目中-有没有用过或自己实现一些-polyfill-方案-兼容性处理方案"}},[e._v("#")]),e._v(" 55. 做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？")]),e._v(" "),n("p",[e._v("html5shiv、Geolocation、Placeholder")]),e._v(" "),n("h2",{attrs:{id:"_56-我们给一个dom同时绑定两个点击事件-一个用捕获-一个用冒泡。会执行几次事件-会先执行冒泡还是捕获"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_56-我们给一个dom同时绑定两个点击事件-一个用捕获-一个用冒泡。会执行几次事件-会先执行冒泡还是捕获"}},[e._v("#")]),e._v(" 56. 我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？")]),e._v(" "),n("p",[e._v("按照W3C的标准，先发生捕获事件，后发生冒泡事件。所有事件的顺序是：其他元素捕获阶段事件 -> 本元素代码顺序事件 -> 其他元素冒泡阶段事件")]),e._v(" "),n("p",[e._v("// div-capture > btn-bubble > btn-capture > div-bubble\nvar btn = document.querySelector('button');\nvar div = document.querySelector('div');")]),e._v(" "),n("p",[e._v("btn.addEventListener('click', function(){\nconsole.log('bubble','btn');\n},false);\nbtn.addEventListener('click', function(){\nconsole.log('capture','btn');\n},true);")]),e._v(" "),n("p",[e._v("div.addEventListener('click', function(){\nconsole.log('bubble','div');\n},false);\ndiv.addEventListener('click', function(){\nconsole.log('capture','div');\n},true);")]),e._v(" "),n("h2",{attrs:{id:"_57-webpack热更新实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_57-webpack热更新实现原理"}},[e._v("#")]),e._v(" 57. Webpack热更新实现原理?")]),e._v(" "),n("p",[e._v("Webpack编译期，为需要热更新的 entry 注入热更新代码(EventSource通信)")]),e._v(" "),n("p",[e._v("页面首次打开后，服务端与客户端通过 EventSource 建立通信渠道，把下一次的 hash 返回前端\n客户端获取到hash，这个hash将作为下一次请求服务端 hot-update.js 和 hot-update.json的hash\n修改页面代码后，Webpack 监听到文件修改后，开始编译，编译完成后，发送 build 消息给客户端\n客户端获取到hash，成功后客户端构造hot-update.js script链接，然后插入主文档\nhot-update.js 插入成功后，执行hotAPI 的 createRecord 和 reload方法，获取到 Vue 组件的 render方法，重新 render 组件， 继而实现 UI 无刷新更新。")]),e._v(" "),n("h2",{attrs:{id:"_58-函数节流和防抖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_58-函数节流和防抖"}},[e._v("#")]),e._v(" 58. 函数节流和防抖")]),e._v(" "),n("p",[e._v("参考链接")]),e._v(" "),n("h2",{attrs:{id:"_59-页面重构怎么操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_59-页面重构怎么操作"}},[e._v("#")]),e._v(" 59. 页面重构怎么操作？")]),e._v(" "),n("p",[e._v("网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。\n也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。")]),e._v(" "),n("p",[e._v("对于传统的网站来说重构通常是：\n表格(table)布局改为DIV+CSS\n使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)\n对于移动平台的优化\n针对于SEO进行优化\n深层次的网站重构应该考虑的方面\n减少代码间的耦合\n让代码保持弹性\n严格按规范编写代码\n设计可扩展的API\n代替旧有的框架、语言(如VB)\n增强用户体验\n通常来说对于速度的优化也包含在重构中\n压缩JS、CSS、image等前端资源(通常是由服务器来解决)\n程序的性能优化(如数据读写)\n采用CDN来加速资源加载\n对于JS DOM的优化\nHTTP服务器的文件缓存")]),e._v(" "),n("h2",{attrs:{id:"_60-列举ie与其他浏览器不一样的特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_60-列举ie与其他浏览器不一样的特性"}},[e._v("#")]),e._v(" 60. 列举IE与其他浏览器不一样的特性")]),e._v(" "),n("p",[e._v("事件不同之处：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；\n")])])]),n("p",[e._v("获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；")]),e._v(" "),n("p",[e._v("阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；")]),e._v(" "),n("p",[e._v("停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()；")]),e._v(" "),n("h2",{attrs:{id:"_61-对node的优点和缺点提出了自己的看法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_61-对node的优点和缺点提出了自己的看法"}},[e._v("#")]),e._v(" 61. 对Node的优点和缺点提出了自己的看法？")]),e._v(" "),n("p",[e._v("*（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，\n因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。\n此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，\n因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。")]),e._v(" "),n("p",[e._v("*（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，\n而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。")]),e._v(" "),n("h2",{attrs:{id:"_62-你有用过哪些前端性能优化的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_62-你有用过哪些前端性能优化的方法"}},[e._v("#")]),e._v(" 62. 你有用过哪些前端性能优化的方法？")]),e._v(" "),n("p",[e._v("（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。")]),e._v(" "),n("p",[e._v("（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数")]),e._v(" "),n("p",[e._v("（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。")]),e._v(" "),n("p",[e._v("（4） 当需要设置的样式很多时设置className而不是直接操作style。")]),e._v(" "),n("p",[e._v("（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。")]),e._v(" "),n("p",[e._v("（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。")]),e._v(" "),n("p",[e._v("（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。")]),e._v(" "),n("p",[e._v("（8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。\n对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。")]),e._v(" "),n("h2",{attrs:{id:"_63-http"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_63-http"}},[e._v("#")]),e._v(" 63. http")]),e._v(" "),n("p",[e._v("1**(信息类)：表示接收到请求并且继续处理\n100——客户必须继续发出请求\n101——客户要求服务器根据请求转换HTTP协议版本")]),e._v(" "),n("p",[e._v("2**(响应成功)：表示动作被成功接收、理解和接受\n200——表明该请求被成功地完成，所请求的资源发送回客户端\n201——提示知道新文件的URL\n202——接受和处理、但处理未完成\n203——返回信息不确定或不完整\n204——请求收到，但返回信息为空\n205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件\n206——服务器已经完成了部分用户的GET请求")]),e._v(" "),n("p",[e._v("3**(重定向类)：为了完成指定的动作，必须接受进一步处理\n300——请求的资源可在多处得到\n301——本网页被永久性转移到另一个URL\n302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。\n303——建议客户访问其他URL或访问方式\n304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用\n305——请求的资源必须从服务器指定的地址得到\n306——前一版本HTTP中使用的代码，现行版本中不再使用\n307——申明请求的资源临时性删除")]),e._v(" "),n("p",[e._v("4**(客户端错误类)：请求包含错误语法或不能正确执行\n400——客户端请求有语法错误，不能被服务器所理解\n401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用\nHTTP 401.1 - 未授权：登录失败\n  HTTP 401.2 - 未授权：服务器配置问题导致登录失败\n  HTTP 401.3 - ACL 禁止访问资源\n  HTTP 401.4 - 未授权：授权被筛选器拒绝\nHTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败\n402——保留有效ChargeTo头响应\n403——禁止访问，服务器收到请求，但是拒绝提供服务\nHTTP 403.1 禁止访问：禁止可执行访问\n  HTTP 403.2 - 禁止访问：禁止读访问\n  HTTP 403.3 - 禁止访问：禁止写访问\n  HTTP 403.4 - 禁止访问：要求 SSL\n  HTTP 403.5 - 禁止访问：要求 SSL 128\n  HTTP 403.6 - 禁止访问：IP 地址被拒绝\n  HTTP 403.7 - 禁止访问：要求客户证书\n  HTTP 403.8 - 禁止访问：禁止站点访问\n  HTTP 403.9 - 禁止访问：连接的用户过多\n  HTTP 403.10 - 禁止访问：配置无效\n  HTTP 403.11 - 禁止访问：密码更改\n  HTTP 403.12 - 禁止访问：映射器拒绝访问\n  HTTP 403.13 - 禁止访问：客户证书已被吊销\n  HTTP 403.15 - 禁止访问：客户访问许可过多\n  HTTP 403.16 - 禁止访问：客户证书不可信或者无效\nHTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效\n404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL\n405——用户在Request-Line字段定义的方法不允许\n406——根据用户发送的Accept拖，请求资源不可访问\n407——类似401，用户必须首先在代理服务器上得到授权\n408——客户端没有在用户指定的饿时间内完成请求\n409——对当前资源状态，请求不能完成\n410——服务器上不再有此资源且无进一步的参考地址\n411——服务器拒绝用户定义的Content-Length属性请求\n412——一个或多个请求头字段在当前请求中错误\n413——请求的资源大于服务器允许的大小\n414——请求的资源URL长于服务器允许的长度\n415——请求资源不支持请求项目格式\n416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段\n417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。")]),e._v(" "),n("p",[e._v("5**(服务端错误类)：服务器不能正确执行一个正确的请求\nHTTP 500 - 服务器遇到错误，无法完成请求\n  HTTP 500.100 - 内部服务器错误 - ASP 错误\n  HTTP 500-11 服务器关闭\n  HTTP 500-12 应用程序重新启动\n  HTTP 500-13 - 服务器太忙\n  HTTP 500-14 - 应用程序无效\n  HTTP 500-15 - 不允许请求 global.asa\n  Error 501 - 未实现\nHTTP 502 - 网关错误\nHTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常")]),e._v(" "),n("h2",{attrs:{id:"_64-一个页面从输入-url-到页面加载显示完成-这个过程中都发生了什么-流程说的越详细越好"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_64-一个页面从输入-url-到页面加载显示完成-这个过程中都发生了什么-流程说的越详细越好"}},[e._v("#")]),e._v(" 64. 一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）")]),e._v(" "),n("p",[e._v("而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、\n到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；")]),e._v(" "),n("p",[e._v("详细版：\n1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;\n2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;\n3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;\n4、进行HTTP协议会话，客户端发送报头(请求报头);\n5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;\n6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;\n7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;\n8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;\n9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;\n10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。")]),e._v(" "),n("h2",{attrs:{id:"_65-前端学习资源"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_65-前端学习资源"}},[e._v("#")]),e._v(" 65. 前端学习资源")]),e._v(" "),n("p",[e._v("js秘密花园\njquery原理解析\ncss3\njs标准")]),e._v(" "),n("h2",{attrs:{id:"_66-邮箱验证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_66-邮箱验证"}},[e._v("#")]),e._v(" 66. 邮箱验证")]),e._v(" "),n("p",[e._v("var pattern = /^([A-Za-z0-9_-.\\u4e00-\\u9fa5])+@([A-Za-z0-9_-.])+.([A-Za-z]{2,8})$/;\n参考链接")]),e._v(" "),n("h2",{attrs:{id:"_67-ajax实现原理及方法使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_67-ajax实现原理及方法使用"}},[e._v("#")]),e._v(" 67. ajax实现原理及方法使用")]),e._v(" "),n("p",[e._v("readyState属性有五个状态值。")]),e._v(" "),n("p",[e._v("0：是uninitialized，未初始化。已经创建了XMLHttpRequest对象但是未初始化。\n1：是loading.已经开始准备好要发送了。\n2：已经发送，但是还没有收到响应。\n3：正在接受响应，但是还不完整。\n4：接受响应完毕。\nresponseText：服务器返回的响应文本。只有当readyState>=3的时候才有值，根据readyState的状态值，可以知道，当readyState=3，返回的响应文本不完整，只有readyState=4，完全返回，才能接受全部的响应文本。")]),e._v(" "),n("p",[e._v("responseXML：response  as Dom Document object。响应信息是xml，可以解析为Dom对象。\nstatus：服务器的Http状态码，若是200，则表示OK，404，表示为未找到。\nstatusText：服务器http状态码的文本。比如OK，Not Found。\n参考链接")]),e._v(" "),n("h2",{attrs:{id:"_68-js实现继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_68-js实现继承"}},[e._v("#")]),e._v(" 68. js实现继承")]),e._v(" "),n("p",[e._v("参考链接")]),e._v(" "),n("h2",{attrs:{id:"_69-用generator实现es7的async"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_69-用generator实现es7的async"}},[e._v("#")]),e._v(" 69. 用generator实现es7的async")]),e._v(" "),n("p",[e._v("3# 70. 闭包使用的优缺点")]),e._v(" "),n("p",[e._v("优点：1.保护函数内部变量的安全，加强了封装性\n2.在内存中维持一个变量\n3.设计私有方法和变量\n4.可以读取函数内部的变量\n缺点：1.导致内存泄漏，使用不当会造成额外的内存占用\n2.可以改变父函数的变量，所以使用时要谨慎")]),e._v(" "),n("h2",{attrs:{id:"_71-canvas和svg区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_71-canvas和svg区别"}},[e._v("#")]),e._v(" 71. canvas和svg区别")]),e._v(" "),n("p",[e._v("1.从图像类别区分，Canvas是基于像素的位图，而SVG却是基于矢量图形。可以简单的把两者的区别看成photoshop与illustrator的区别。\n2.从结构上说，Canvas没有图层的概念，所有的修改整个画布都要重新渲染，而SVG则可以对单独的标签进行修改。\n3.从操作对象上说，Canvas是基于HTML canvas标签，通过宿主提供的Javascript API对整个画布进行操作的，而SVG则是基于XML元素的。\n4.从功能上讲，SVG发布日期较早，所以功能相对Canvas比较完善。\n5.关于动画，Canvas更适合做基于位图的动画，而SVG则适合图表的展示。\n6.从搜索引擎角度分析，由于svg是有大量标签组成，所以可以通过给标签添加属性，便于爬虫搜索")]),e._v(" "),n("h2",{attrs:{id:"_72-开启硬件加速"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_72-开启硬件加速"}},[e._v("#")]),e._v(" 72. 开启硬件加速")]),e._v(" "),n("p",[e._v("//目前，像Chrome/Filefox/Safari/IE9+以及最新版本Opera都支持硬件加速，当检测到某个DOM元素应用了某些CSS规则时就会自动开启，从而解决页面闪白，保证动画流畅。\n.css {\n-webkit-transform: translate3d(0,0,0);\n-moz-transform: translate3d(0,0,0);\n-ms-transform: translate3d(0,0,0);\ntransform: translate3d(0,0,0);\n}")]),e._v(" "),n("h2",{attrs:{id:"_73-button注意事项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_73-button注意事项"}},[e._v("#")]),e._v(" 73. button注意事项")]),e._v(" "),n("p",[n("button"),e._v("元素一定要写上type属性不然会默认提交表单，出现想不到的bug\n74. 移动端html标签几个体验优化\nhtml,body{")]),e._v(" "),n("p",[e._v("overflow: hidden;/"),n("em",[e._v("手机上写overflow-x:hidden;会有兼容性问题，如果子级如果是绝对定位有运动到屏幕外的话ios7系统会出现留白")]),e._v("/")]),e._v(" "),n("p",[e._v("-webkit-overflow-scrolling:touch;/"),n("em",[e._v("流畅滚动,ios7下会有滑一下滑不动的情况，所以需要写上")]),e._v("/")]),e._v(" "),n("p",[e._v("position:realtive;/"),n("em",[e._v("直接子级如果是绝对定位有运动到屏幕外的话，会出现留白")]),e._v("/\n}")]),e._v(" "),n("h2",{attrs:{id:"_75-手机上的多行省略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_75-手机上的多行省略"}},[e._v("#")]),e._v(" 75.手机上的多行省略")]),e._v(" "),n("p",[e._v(".overflow-hidden{\ndisplay: box !important;\ndisplay: -webkit-box !important;\noverflow: hidden;\ntext-overflow: ellipsis;\n-webkit-box-orient: vertical;\n-webkit-line-clamp: 4;/"),n("em",[e._v("第几行出现省略号")]),e._v("/\n/"),n("em",[e._v("text-align:justify;不能和溢出隐藏的代码一起写，会有bug")]),e._v("/\n}")]),e._v(" "),n("h2",{attrs:{id:"_76-长时间按住页面闪退"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_76-长时间按住页面闪退"}},[e._v("#")]),e._v(" 76. 长时间按住页面闪退")]),e._v(" "),n("p",[e._v(".element {\n-webkit-touch-callout: none;\n}")]),e._v(" "),n("h2",{attrs:{id:"_77-改变输入框内提示文字颜色"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_77-改变输入框内提示文字颜色"}},[e._v("#")]),e._v(" 77. 改变输入框内提示文字颜色")]),e._v(" "),n("p",[e._v("::-webkit-input-placeholder { /* WebKit browsers "),n("em",[e._v("/\ncolor: #999; }\n:-moz-placeholder { /")]),e._v(" Mozilla Firefox 4 to 18 "),n("em",[e._v("/\ncolor: #999; }\n::-moz-placeholder { /")]),e._v(" Mozilla Firefox 19+ "),n("em",[e._v("/\ncolor: #999; }\n:-ms-input-placeholder { /")]),e._v(" Internet Explorer 10+ */\ncolor: #999; }\ninput:focus::-webkit-input-placeholder{ color:#999; }")]),e._v(" "),n("h2",{attrs:{id:"_78-自动播放音乐"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_78-自动播放音乐"}},[e._v("#")]),e._v(" 78. 自动播放音乐")]),e._v(" "),n("p",[e._v("//JS绑定自动播放（操作window时，播放音乐）\n$(window).one('touchstart', function(){\nmusic.play();\n})")]),e._v(" "),n("p",[e._v('//微信下兼容处理\ndocument.addEventListener("WeixinJSBridgeReady", function () {\nmusic.play();\n}, false);')]),e._v(" "),n("h2",{attrs:{id:"_79-消除transtration闪屏"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_79-消除transtration闪屏"}},[e._v("#")]),e._v(" 79.消除transtration闪屏")]),e._v(" "),n("p",[e._v("消除transition闪屏\n.css {\n-webkit-transform-style: preserve-3d;\n-webkit-backface-visibility: hidden;\n-webkit-perspective: 1000;\n}")]),e._v(" "),n("p",[e._v("作者：徐小夕\n"),n("a",{attrs:{href:"https://juejin.cn/post/6844903951486156813",target:"_blank",rel:"noopener noreferrer"}},[e._v("原文链接"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);