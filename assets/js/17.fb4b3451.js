(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{611:function(e,t,n){"use strict";n.r(t);var r=n(5),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"_1-用-代替-用于判断运算符左侧的值为null或undefined时-才返回右侧的值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-用-代替-用于判断运算符左侧的值为null或undefined时-才返回右侧的值"}},[e._v("#")]),e._v(" 1. 用??代替||，用于判断运算符左侧的值为null或undefined时，才返回右侧的值")]),e._v(" "),n("p",[e._v("??运算符是 ES2020 引入，也被称为null判断运算符( Nullish coalescing operator)\n它的行为类似||，但是更严\n||运算符是左边是空字符串或false或0等falsy值，都会返回后侧的值。而??必须运算符左侧的值为null或undefined时，才会返回右侧的值。因此0||1的结果为1，0??1的结果为0\n例如\nconst response = {\nsettings: {\nnullValue: null,\nheight: 400,\nanimationDuration: 0,\nheaderText: '',\nshowSplashScreen: false\n}\n};")]),e._v(" "),n("p",[e._v("const undefinedValue = response.settings.undefinedValue ?? 'some other default'; // result: 'some other default'\nconst nullValue = response.settings.nullValue ?? 'some other default'; // result: 'some other default'\nconst headerText = response.settings.headerText ?? 'Hello, world!'; // result: ''\nconst animationDuration = response.settings.animationDuration ?? 300; // result: 0\nconst showSplashScreen = response.settings.showSplashScreen ?? true; // result: false")]),e._v(" "),n("p",[e._v("浏览器支持情况\n"),n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b2f28f816572460996571c24c30ce3ab~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"图片"}})]),e._v(" "),n("h2",{attrs:{id:"_2-使用-简化-和三元运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用-简化-和三元运算符"}},[e._v("#")]),e._v(" 2. 使用?.简化&&和三元运算符")]),e._v(" "),n("p",[e._v("?.也是ES2020 引入，有人称为链判断运算符（optional chaining operator）\n?.直接在链式调用的时候判断，判断左侧的对象是否为null或undefined，如果是的，就不再往下运算，返回undefined，如果不是，则返回右侧的值\n例如\nvar street = user.address && user.address.street;")]),e._v(" "),n("p",[e._v("var fooInput = myForm.querySelector('input[name=foo]')\nvar fooValue = fooInput ? fooInput.value : undefined")]),e._v(" "),n("p",[e._v("// 简化\nvar street = user.address?.street\nvar fooValue = myForm.querySelector('input[name=foo]')?.value")]),e._v(" "),n("p",[e._v("注： 常见写法")]),e._v(" "),n("p",[e._v("obj?.prop  对象属性\nobj?.[expr]  对象属性\nfunc?.(...args)  函数或对象方法的调用")]),e._v(" "),n("p",[e._v("浏览器支持情况\n"),n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a2120952028a4b4a9ac4d2322a963d04~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:"图片"}})]),e._v(" "),n("h2",{attrs:{id:"_3-使用动态导入import-实现按需加载-优化静态import"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用动态导入import-实现按需加载-优化静态import"}},[e._v("#")]),e._v(" 3. 使用动态导入import()实现按需加载（优化静态import）")]),e._v(" "),n("p",[e._v('我们可以使用 import 语句初始化的加载依赖项\nimport defaultExport from "module-name";\nimport * as name from "module-name";\n//...')]),e._v(" "),n("p",[e._v('但是静态引入的import 语句需要依赖于 type="module" 的script标签，而且有的时候我们希望可以根据条件来按需加载模块，比如以下场景：')]),e._v(" "),n("p",[e._v("当静态导入的模块很明显的降低了代码的加载速度且被使用的可能性很低，或者并不需要马上使用它\n当静态导入的模块很明显的占用了大量系统内存且被使用的可能性很低\n当被导入的模块，在加载时并不存在，需要异步获取\n当被导入的模块有副作用，这些副作用只有在触发了某些条件才被需要时")]),e._v(" "),n("p",[e._v("这个时候我们就可以使用动态引入import()，它跟函数一样可以用于各种地方，返回的是一个 promise\n基本使用如下两种形式\n//形式 1\nimport('/modules/my-module.js')\n.then((module) => {\n// Do something with the module.\n});")]),e._v(" "),n("p",[e._v("//形式2\nlet module = await import('/modules/my-module.js');")]),e._v(" "),n("p",[e._v("浏览器支持情况\n"),n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1ca79e494a44799b26b0c80573eb7f5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:""}})]),e._v(" "),n("h2",{attrs:{id:"_4-使用顶层-await-top-level-await-简化-async-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用顶层-await-top-level-await-简化-async-函数"}},[e._v("#")]),e._v(" 4. 使用顶层 await（top-level await）简化 async 函数")]),e._v(" "),n("p",[e._v("其实上面的代码就有用到\nlet module = await import('/modules/my-module.js');")]),e._v(" "),n("p",[e._v("顶层 await 允许开发者在 async 函数外部使用 await 字段\n因此\n//以前\n(async function () {\nawait Promise.resolve(console.log('🎉'));\n// → 🎉\n})();")]),e._v(" "),n("p",[e._v("//简化后\nawait Promise.resolve(console.log('🎉'));")]),e._v(" "),n("p",[e._v("浏览器支持情况\n"),n("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5293083bbe24477b12cfc990cd7334f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:""}})]),e._v(" "),n("h2",{attrs:{id:"_5-使用string-prototype-replaceall-简化replace一次性替换所有子字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-使用string-prototype-replaceall-简化replace一次性替换所有子字符串"}},[e._v("#")]),e._v(" 5. 使用String.prototype.replaceAll()简化replace一次性替换所有子字符串")]),e._v(" "),n("p",[e._v("String.prototype.replaceAll()用法与String.prototype.replace()类似\n但是replace仅替换第一次出现的子字符串，而replaceAll会替换所有\n例如需要替换所有a为A：\n// 以前\nconsole.log('aaa'.replace(/a/g,'A')) //AAA")]),e._v(" "),n("p",[e._v("// 简化后\nconsole.log('aaa'.replaceAll('a','A')) //AAA")]),e._v(" "),n("p",[e._v("浏览器支持情况\n"),n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/612d0005f5434f46bb65bd422f7653e9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:""}})]),e._v(" "),n("h2",{attrs:{id:"_6-使用proxy替代object-defineproperty"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-使用proxy替代object-defineproperty"}},[e._v("#")]),e._v(" 6. 使用Proxy替代Object.defineProperty")]),e._v(" "),n("p",[e._v("为什么使用 Proxy 替代 Object.defineProperty，简单总结Proxy的几点优势")]),e._v(" "),n("p",[e._v("Proxy 是对整个对象的代理，而 Object.defineProperty 只能代理某个属性\n对象上新增属性，Proxy 可以监听到，Object.defineProperty 不能\n数组新增修改，Proxy 可以监听到，Object.defineProperty 不能\n若对象内部属性要全部递归代理，Proxy 可以只在调用的时候递归，而 Object.definePropery 需要一次完成所有递归，性能比 Proxy 差")]),e._v(" "),n("p",[e._v("使用也很简单，Proxy本质是构造函数，通过new即可产生对象，它接收两个参数：")]),e._v(" "),n("p",[e._v("target表示的就是要拦截（代理）的目标对象\nhandler是用来定制拦截行为（13种）")]),e._v(" "),n("p",[e._v("例如响应式reactive的基本实现：\nfunction reactive(obj) {\nreturn new Proxy(obj, {\nget(target, key) {\n// 可以做依赖收集\ntrack(target, key)\nreturn target[key]\n},\nset(target, key, val) {\ntarget[key] = val\n// 触发依赖\ntrigger(target, key)\n}\n})\n}")]),e._v(" "),n("p",[e._v("浏览器支持情况\n"),n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c4a6f4e9d9d4dfaaf775d959828d99b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:""}})]),e._v(" "),n("h2",{attrs:{id:"_7-promise-any快速获取一组promise实例中第一个fulfilled的promise"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-promise-any快速获取一组promise实例中第一个fulfilled的promise"}},[e._v("#")]),e._v(" 7. Promise.any快速获取一组Promise实例中第一个fulfilled的promise")]),e._v(" "),n("p",[e._v("Promise.any 接收一组Promise实例作为参数")]),e._v(" "),n("p",[e._v("只要其中的一个 promise 成功，就返回那个已经成功的 promise\n如果这组可迭代对象中，没有一个 promise 成功，就返回一个失败的 promise 和 AggregateError 类型的实例")]),e._v(" "),n("p",[e._v("写法推荐\ntry {\nconst first = await Promise.any(promises);\n// Any of the promises was fulfilled.\n} catch (error) {\n// All of the promises were rejected.\n}")]),e._v(" "),n("p",[e._v("或者\nPromise.any(promises).then(\n(first) => {\n// Any of the promises was fulfilled.\n},\n(error) => {\n// All of the promises were rejected.\n}\n);")]),e._v(" "),n("p",[e._v("浏览器支持情况\n"),n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03577c068891434a8ac0864ea82dbf95~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:""}})]),e._v(" "),n("h2",{attrs:{id:"_8-使用bigint支持大整数计算问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-使用bigint支持大整数计算问题"}},[e._v("#")]),e._v(" 8. 使用BigInt支持大整数计算问题")]),e._v(" "),n("p",[e._v("ES2020 引入了一种新的数据类型 BigInt，用来表示任意位数的整数\n例如\n// 超过 53 个二进制位的数值（相当于 16 个十进制位），无法保持精度\nMath.pow(2, 53) === Math.pow(2, 53) + 1 // true")]),e._v(" "),n("p",[e._v("// BigInt\nBigInt(Math.pow(2, 53)) === BigInt(Math.pow(2, 53)) + BigInt(1) // false")]),e._v(" "),n("p",[e._v("除了使用BigInt来声明一个大整数，还可以使用数字后面加n的形式，如\n1234 // 普通整数\n1234n // BigInt")]),e._v(" "),n("p",[e._v("需要了解BigInt数字操作时的支持情况，以免踩坑")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("操作")]),n("th",[e._v("是否支持")])])]),n("tbody",[n("tr",[n("td",[e._v("单目 (+) 运算符")]),n("td",[e._v("N")])]),n("tr",[n("td",[n("code",[e._v("+")]),e._v("、"),n("code",[e._v("*")]),e._v("、"),n("code",[e._v("-")]),e._v("、"),n("code",[e._v("**")]),e._v("、"),n("code",[e._v("%")]),e._v(" 运算符")]),n("td",[e._v("Y")])]),n("tr",[n("td",[e._v("\\ 除法运算符")]),n("td",[e._v("带小数的运算会被取整")])]),n("tr",[n("td",[n("code",[e._v(">>>")]),e._v(" 无符号右移位操作符")]),n("td",[e._v("N")])]),n("tr",[n("td",[e._v("其他位移操作符")]),n("td",[e._v("Y")])]),n("tr",[n("td",[e._v("与 Number 混合运算")]),n("td",[e._v("N（必须转换为同类型）")])]),n("tr",[n("td",[e._v("Math 对象方法")]),n("td",[e._v("N")])]),n("tr",[n("td",[e._v("Number 与 BigInt 比较（排序）")]),n("td",[e._v("Y（宽松相等 ==）")])]),n("tr",[n("td",[e._v("Boolean 表现")]),n("td",[e._v("类型 Number 对象")])]),n("tr",[n("td",[e._v("JSON 中使用")]),n("td",[e._v("N")])])])]),e._v(" "),n("p",[e._v("操作是否支持单目 (+) 运算符N+、*、-、**、% 运算符Y\\ 除法运算符带小数的运算会被取整>>> 无符号右移位操作符N其他位移操作符Y与 Number 混合运算N（必须转换为同类型）Math 对象方法NNumber 与 BigInt 比较（排序）Y（宽松相等 ==）Boolean 表现类型 Number 对象JSON 中使用N\n浏览器支持情况\n"),n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/368a1f41e83f48e2a2d778fee056606f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?",alt:""}}),e._v("\n9. 使用Array.prototype.at()简化arr.length\nArray.prototype.at()接收一个正整数或者负整数作为参数，表示获取指定位置的成员\n参数正数就表示顺数第几个，负数表示倒数第几个，这可以很方便的某个数组末尾的元素\n例如\nvar arr = [1, 2, 3, 4, 5]\n// 以前获取最后一位\nconsole.log(arr[arr.length-1]) //5\n// 简化后\nconsole.log(arr.at(-1)) // 5")]),e._v(" "),n("ol",{attrs:{start:"10"}},[n("li",[e._v("使用哈希前缀#将类字段设为私有\n在类中通过哈希前缀#标记的字段都将被私有，子类实例将无法继承\n例如\nclass ClassWithPrivateField {\n#privateField;\n#privateMethod() {\nreturn 'hello world';\n}\nconstructor() {\nthis.#privateField = 42;\n}\n}")])]),e._v(" "),n("p",[e._v("const instance = new ClassWithPrivateField()\nconsole.log(instance.privateField); //undefined\nconsole.log(instance.privateMethod); //undefined")]),e._v(" "),n("p",[e._v("可以看到，属性privateField和方法privateMethod都被私有化了，在实例中无法获取到")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/7072274726940311588",target:"_blank",rel:"noopener noreferrer"}},[e._v("原文链接"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);